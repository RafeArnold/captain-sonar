version: '3.9'
services:
  app:
    build:
      context: .
      args:
        PORT: ${APP_SERVER_PORT}
        VERSION: ${APP_VERSION}
        WORKING_DIR: ${WORKING_DIR}
    environment:
      APPLICATION_PROPERTIES_PATH: ${APPLICATION_PROPERTIES_DST}
      server.port: ${APP_SERVER_PORT}
      front-end.dir: ${FRONT_END_DST}
      game.id-generator.in-memory-random.random-seed: ${GAME_ID_GENERATOR_RANDOM_SEED}
      repository.type: redis
      redis.connection.host: redis-db
      redis.connection.port: 6379
      redis.connection.password: ${REDIS_PASS}
      event-api.v1.type: vertx
#      rabbitmq.connection.host: rabbitmq
#      rabbitmq.connection.port: 5672
#      rabbitmq.connection.username: ${RABBIT_MQ_USER}
#      rabbitmq.connection.password: ${RABBIT_MQ_PASS}
    volumes:
      - type: bind
        source: ${APPLICATION_PROPERTIES_SRC}
        target: ${WORKING_DIR}/${APPLICATION_PROPERTIES_DST}
        read_only: true
      - type: bind
        source: ${FRONT_END_SRC}
        target: ${WORKING_DIR}/${FRONT_END_DST}
        read_only: true
    deploy:
      replicas: 3
    expose:
      - ${APP_SERVER_PORT}
    command: -cluster
    depends_on:
      - redis-db
#      - rabbitmq
  nginx:
    image: nginx:alpine
    volumes:
      - type: bind
        source: ./nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
    ports:
      - "9000:8080"
    depends_on:
      - app
  redis-db:
    image: redis:alpine
    volumes:
      - type: volume
        source: redis-db-data
        target: /data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASS}
#  rabbitmq:
#    image: rabbitmq:alpine
#    hostname: rabbitmq
#    volumes:
#      - type: volume
#        source: rabbitmq-data
#        target: /var/lib/rabbitmq
#    environment:
#      RABBITMQ_DEFAULT_USER: ${RABBIT_MQ_USER}
#      RABBITMQ_DEFAULT_PASS: ${RABBIT_MQ_PASS}
volumes:
  redis-db-data:
#  rabbitmq-data:
